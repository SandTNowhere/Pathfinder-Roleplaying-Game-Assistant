from tkinter import *
from tkinter import ttk
 
class NotebookDemo(ttk.Frame):
     
    def __init__(self, isapp=True, name='notebookdemo'):
        ttk.Frame.__init__(self, name=name)
        self.pack(expand=Y, fill=BOTH)
        self.master.title('Notebook Demo')
        self._create_widgets()
         
    def _create_widgets(self):
        self._create_demo_panel()
         
    def _create_demo_panel(self):
        demoPanel = Frame(self, name='demo')
        demoPanel.pack(side=TOP, fill=BOTH, expand=Y)
                 
        # create the notebook
        nb = ttk.Notebook(demoPanel, name='notebook')
 
        # extend bindings to top level window allowing
        #   CTRL+TAB - cycles thru tabs
        #   SHIFT+CTRL+TAB - previous tab
        #   ALT+K - select tab using mnemonic (K = underlined letter)
        nb.enable_traversal()
         
        nb.pack(fill=BOTH, expand=Y, padx=2, pady=3)
        self._create_character_tab(nb)
        self._create_ability_tab(nb)
        self._create_attribute_tab(nb)
                        
    def _create_character_tab(self, nb):
        # frame to hold framex
        frame = ttk.Frame(nb, name='descrip')
        # frame = ttk.Frame(frame, borderwidth=5, relief="sunken", width=200, height=100)

        # """ basic character information declaration """
        name = ttk.Entry(frame, width=45)
        namelbl = ttk.Label(frame, text="Character Name", foreground='grey')
        align = ttk.Entry(frame, width=10) 
        alignlbl = ttk.Label(frame, text="Alignment", foreground='grey')
        player = ttk.Entry(frame, width=43)
        playerlbl = ttk.Label(frame, text="Player", foreground='grey')
        level = ttk.Entry(frame, width=56)
        levellbl = ttk.Label(frame, text="Character Level", foreground='grey')
        deity = ttk.Entry(frame, width=21)
        deitylbl = ttk.Label(frame, text="Deity", foreground='grey')
        homeland = ttk.Entry(frame, width=21)
        homelandlbl = ttk.Label(frame, text="Homeland", foreground='grey')
        race = ttk.Entry(frame, width=29)
        racelbl = ttk.Label(frame, text="Race", foreground='grey')
        size = ttk.Entry(frame, width=15)
        sizelbl = ttk.Label(frame, text="Size", foreground='grey')
        gender = ttk.Entry(frame, width=6)
        genderlbl = ttk.Label(frame, text="Gender", foreground='grey')
        age = ttk.Entry(frame, width=3)
        agelbl = ttk.Label(frame, text="Age", foreground='grey')
        height = ttk.Entry(frame, width=10)
        heightlbl = ttk.Label(frame, text="Height", foreground='grey')
        weight = ttk.Entry(frame, width=10)
        weightlbl = ttk.Label(frame, text="Weight", foreground='grey')
        hair = ttk.Entry(frame, width=10)
        hairlbl = ttk.Label(frame, text="Hair", foreground='grey')
        eyes = ttk.Entry(frame, width=10)
        eyeslbl = ttk.Label(frame, text="Eyes", foreground='grey')

        """ basic character information placement """
        # frame.grid(    column=0, row=0)
        name.grid(       column=1, row=2, columnspan=3)
        namelbl.grid(    column=1, row=3, sticky=(N, W))
        align.grid(      column=4, row=2, sticky=(W), columnspan=1)
        alignlbl.grid(   column=4, row=3, sticky=(N, W))
        player.grid(     column=5, row=2, sticky=(W), columnspan=4)
        playerlbl.grid(  column=5, row=3, sticky=(N,W))
        level.grid(      column=1, row=4, sticky=(W), columnspan=4)
        levellbl.grid(   column=1, row=5, sticky=(N,W))
        deity.grid(      column=5, row=4, sticky=(W), columnspan=2)
        deitylbl.grid(   column=5, row=5, sticky=(N,W))
        homeland.grid(   column=7, row=4, sticky=(W), columnspan=2)
        homelandlbl.grid(column=7, row=5, sticky=(N,W))
        race.grid(       column=1, row=7, sticky=(W), columnspan=2)
        racelbl.grid(    column=1, row=8, sticky=(N,W))
        size.grid(       column=3, row=7, sticky=(W), columnspan=1)
        sizelbl.grid(    column=3, row=8, sticky=(N,W))
        gender.grid(     column=4, row=7, sticky=(W))
        genderlbl.grid(  column=4, row=8, sticky=(N,W))
        age.grid(        column=4, row=7, sticky=(E))
        agelbl.grid(     column=4, row=8, sticky=(N,E))
        height.grid(     column=5, row=7, sticky=(W), columnspan=1)
        heightlbl.grid(  column=5, row=8, sticky=(N,W))
        weight.grid(     column=6, row=7, sticky=(W), columnspan=1)
        weightlbl.grid(  column=6, row=8, sticky=(N,W))
        hair.grid(       column=7, row=7, sticky=(W), columnspan=1)
        hairlbl.grid(    column=7, row=8, sticky=(N,W))
        eyes.grid(       column=8, row=7, sticky=(W), columnspan=1)
        eyeslbl.grid(    column=8, row=8, sticky=(N,W))
        frame.rowconfigure(1, weight=1)
        frame.columnconfigure((0,1), weight=1, uniform=1)
         
        # add to notebook (underline = index for short-cut character)
        nb.add(frame, text='Character')

    # =============================================================================
    def _create_ability_tab(self, nb):
        # Populate the second pane. Note that the frame doesn't really matter
        frame = ttk.Frame(nb)
        # """ ability declaration """
        abnamelbl = ttk.Label(frame, text="Ability Name", background='black', foreground='white')
        abscorelbl = ttk.Label(frame, text = "Abl Score | Mod", background='black', foreground='white')
        tempadjlbl = ttk.Label(frame, text = "Temp Adj | Mod", background='black', foreground='white')
        strlbl = ttk.Label(frame, text = "   Strength    "  , background='black', foreground='white')
        strabs = ttk.Entry(frame, width = 6)
        strabm = ttk.Entry(frame, width = 6)
        strtma = ttk.Entry(frame, width = 6)
        strtmm = ttk.Entry(frame, width = 6) 
        dexlbl = ttk.Label(frame, text = "   Dexterity    ", background='black', foreground='white')
        dexabs = ttk.Entry(frame, width = 6)
        dexabm = ttk.Entry(frame, width = 6)
        dextma = ttk.Entry(frame, width = 6)
        dextmm = ttk.Entry(frame, width = 6)
        conlbl = ttk.Label(frame, text = "Constitution", background='black', foreground='white')
        conabs = ttk.Entry(frame, width = 6)
        conabm = ttk.Entry(frame, width = 6)
        contma = ttk.Entry(frame, width = 6)
        contmm = ttk.Entry(frame, width = 6)
        intlbl = ttk.Label(frame, text = " Intelligence ", background='black', foreground='white')
        intabs = ttk.Entry(frame, width = 6)
        intabm = ttk.Entry(frame, width = 6)
        inttma = ttk.Entry(frame, width = 6)
        inttmm = ttk.Entry(frame, width = 6)
        wislbl = ttk.Label(frame, text = "   Wisdom    ", background='black', foreground='white')
        wisabs = ttk.Entry(frame, width = 6)
        wisabm = ttk.Entry(frame, width = 6)
        wistma = ttk.Entry(frame, width = 6)
        wistmm = ttk.Entry(frame, width = 6)
        chalbl = ttk.Label(frame, text = "   Charisma  ", background='black', foreground='white')
        chaabs = ttk.Entry(frame, width = 6)
        chaabm = ttk.Entry(frame, width = 6)
        chatma = ttk.Entry(frame, width = 6)
        chatmm = ttk.Entry(frame, width = 6)

        """ ability placement """
        abnamelbl.grid(  column=1, row=9, sticky = (W))
        abscorelbl.grid( column=2, row=9, sticky = (W))
        tempadjlbl.grid( column=3, row=9, sticky = (W))
        strlbl.grid(     column=1, row=10, columnspan = 2, sticky = (W))
        strabs.grid(     column=2, row=10, sticky = (W))
        strabm.grid(     column=2, row=10, sticky = (E), padx = 5)
        strtma.grid(     column=3, row=10, sticky = (W), padx = 3)
        strtmm.grid(     column=3, row=10, sticky = (E), padx = 8)
        dexlbl.grid(     column=1, row=11, columnspan = 2, sticky = (W))
        dexabs.grid(     column=2, row=11, sticky = (W))
        dexabm.grid(     column=2, row=11, sticky = (E), padx = 5)
        dextma.grid(     column=3, row=11, sticky = (W), padx = 3)
        dextmm.grid(     column=3, row=11, sticky = (E), padx = 8)
        conlbl.grid(     column=1, row=12, columnspan = 2, sticky = (W))
        conabs.grid(     column=2, row=12, sticky = (W))
        conabm.grid(     column=2, row=12, sticky = (E), padx = 5)
        contma.grid(     column=3, row=12, sticky = (W), padx = 3)
        contmm.grid(     column=3, row=12, sticky = (E), padx = 8)
        intlbl.grid(     column=1, row=13, columnspan = 2, sticky = (W))
        intabs.grid(     column=2, row=13, sticky = (W))
        intabm.grid(     column=2, row=13, sticky = (E), padx = 5)
        inttma.grid(     column=3, row=13, sticky = (W), padx = 3)
        inttmm.grid(     column=3, row=13, sticky = (E), padx = 8)
        wislbl.grid(     column=1, row=14, columnspan = 2, sticky = (W))
        wisabs.grid(     column=2, row=14, sticky = (W))
        wisabm.grid(     column=2, row=14, sticky = (E), padx = 5)
        wistma.grid(     column=3, row=14, sticky = (W), padx = 3)
        wistmm.grid(     column=3, row=14, sticky = (E), padx = 8)
        chalbl.grid(     column=1, row=15, columnspan = 2, sticky = (W))
        chaabs.grid(     column=2, row=15, sticky = (W))
        chaabm.grid(     column=2, row=15, sticky = (E), padx = 5)
        chatma.grid(     column=3, row=15, sticky = (W), padx = 3)
        chatmm.grid(     column=3, row=15, sticky = (E), padx = 8)

        nb.add(frame, text='Abilities')
 
    # =============================================================================
    def _create_attribute_tab(self, nb):
        # populate the third frame with a text widget
        frame = ttk.Frame(nb)
        """ Basic attribute declaration """
        hplbl = ttk.Label(frame, text = "Total HP", background='black', foreground='white')
        hp = ttk.Entry(frame, width = 10)
        drlbl = ttk.Label(frame, text = " DR", foreground='grey')
        dmgres = ttk.Entry(frame, width = 6)
        speedlbl = ttk.Label(frame, text = "Speed", background='black', foreground='white')
        bspeed = ttk.Entry(frame, width = 10)
        bpdlbl = ttk.Label(frame, text = " Base", foreground='grey')
        aspeed = ttk.Entry(frame, width = 10)
        asplbl = ttk.Label(frame, text = " w/ Armor", foreground='grey')
        sspeed = ttk.Entry(frame, width = 5)
        ssplbl = ttk.Label(frame, text = "Swim", foreground='grey')
        fspeed = ttk.Entry(frame, width = 4)
        fsplbl = ttk.Label(frame, text = "Fly", foreground='grey')
        maneuv = ttk.Entry(frame, width = 10)
        mnvlbl = ttk.Label(frame, text = "Maneuver", foreground='grey')
        cspeed = ttk.Entry(frame, width = 5)
        csplbl = ttk.Label(frame, text = "Climb", foreground='grey')
        burspd = ttk.Entry(frame, width = 4)
        brslbl = ttk.Label(frame, text = "Burw", foreground='grey')
        tmdlbl = ttk.Label(frame, text = "Temp Mod", foreground='grey')
        tmpmod1 = ttk.Entry(frame, width = 9)
        tmpmod2 = ttk.Entry(frame, width = 9)
        tmpmod3 = ttk.Entry(frame, width = 9)
        wcrlbl = ttk.Label(frame, text = "Wounds / HP", background='black', foreground='white')
        wcr1 = ttk.Entry(frame, width = 31)
        wcr2 = ttk.Entry(frame, width = 31)
        nldlbl = ttk.Label(frame, text = "Non-Lethal Damage", background='black', foreground='white')
        nld = ttk.Entry(frame, width = 31)
        inilbl = ttk.Label(frame, text = "  Initiative  ", background='black', foreground='white')
        initot = ttk.Entry(frame, width = 5)
        inidex = ttk.Entry(frame, width = 4)
        inimsc = ttk.Entry(frame, width = 4)
        inip = ttk.Label(frame, text = "+")
        inie = ttk.Label(frame, text = "=")
        inidexlbl = ttk.Label(frame, text = "Dex", foreground='grey')
        inimsclbl = ttk.Label(frame, text = "Misc", foreground='grey')
        initotlbl = ttk.Label(frame, text = "Total", foreground='grey')
        inimodlbl = ttk.Label(frame, text = "  Modifier  ", foreground='grey')

        """ Basic attribute placement"""
        hplbl.grid(      column=4, row=9, sticky = (E))
        hp.grid(         column=5, row=9, sticky = (W))
        drlbl.grid(      column=6, row=9, sticky = (W))
        dmgres.grid(     column=6, row=9, sticky = (E))
        speedlbl.grid(   column=7, row=9, sticky = (E), padx = 5)
        bspeed.grid(     column=8, row=9, sticky = (W))
        bpdlbl.grid(     column=8, row=10, sticky = (W))
        aspeed.grid(     column=9, row=9, sticky = (W))
        asplbl.grid(     column=9, row=10, sticky = (W))
        sspeed.grid(     column=7, row=11, sticky = (W))
        ssplbl.grid(     column=7, row=12, sticky = (W))
        fspeed.grid(     column=7, row=11, sticky = (E))
        fsplbl.grid(     column=7, row=12, sticky = (E))
        maneuv.grid(     column=8, row=11, sticky = (W))
        mnvlbl.grid(     column=8, row=12, sticky = (W))
        cspeed.grid(     column=9, row=11, sticky = (W))
        csplbl.grid(     column=9, row=12, sticky = (W))
        burspd.grid(     column=9, row=11, sticky = (E))
        brslbl.grid(     column=9, row=12, sticky = (E))
        tmdlbl.grid(     column=10, row=9, sticky = (E))
        tmpmod1.grid(    column=10, row=10, sticky = (W), padx = 3)
        tmpmod2.grid(    column=10, row=11, sticky = (W), padx = 3)
        tmpmod3.grid(    column=10, row=12, sticky = (W), padx = 3)
        wcrlbl.grid(     column=4, row=10, columnspan = 2, sticky = (W))
        wcr1.grid(       column=4, row=11, columnspan = 3, sticky = (NE))
        wcr2.grid(       column=4, row=12, columnspan = 3, sticky = (NE))
        nldlbl.grid(     column=4, row=13, columnspan = 2, sticky = (W))
        nld.grid(        column=4, row=14, columnspan = 3, sticky = (NE))
        inilbl.grid(     column=4, row=16, columnspan = 2, sticky = (W))
        initot.grid(     column=5, row=16, sticky = (E), padx = 12)
        inie.grid(       column=5, row=16, sticky = (E))
        inidex.grid(     column=6, row=16, sticky = (E))
        inip.grid(       column=6, row=16)
        inimsc.grid(     column=6, row=16, sticky = (W))
        inidexlbl.grid(  column=6, row=15, sticky = (E))
        inimsclbl.grid(  column=6, row=15, sticky = (W))
        initotlbl.grid(  column=5, row=15, sticky = (E), padx = 12)
        inimodlbl.grid(  column=4, row=15, sticky = (W))
        
        nb.add(frame, text='Attributes')
         
         
if __name__ == '__main__':
    NotebookDemo().mainloop()